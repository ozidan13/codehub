// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  submissions Submission[]
  accounts    Account[]
  sessions    Session[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Platform {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  tasks Task[]
  
  @@map("platforms")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  link        String?  // URL link to the specific task content
  platformId  String
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  platform    Platform @relation(fields: [platformId], references: [id], onDelete: Cascade)
  submissions Submission[]
  
  @@map("tasks")
}

model Submission {
  id        String           @id @default(cuid())
  summary   String           @db.Text
  status    SubmissionStatus @default(PENDING)
  score     Int?             // 0-100, only set when status is APPROVED
  feedback  String?          @db.Text
  userId    String
  taskId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@unique([userId, taskId]) // One submission per user per task
  @@map("submissions")
}

enum Role {
  STUDENT
  ADMIN
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}
